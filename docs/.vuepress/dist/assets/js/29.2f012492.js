(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{991:function(e,n,s){"use strict";s.r(n);var t={data:()=>({str:"\n\n        <script>\n          export default {\n            data() {\n              return {\n                loginState: false, // 是否登录成功\n                timeOutObj: null, // 定时器\n                startSearch: false, // 蓝牙连接时间状态\n                dataInfo：{\n                  lyName: '', // 蓝牙名称 通过接口获取\n                },\n                blueInfo: {\n                  deviceID: null, // 蓝牙设备id\n                  serviceUUID: '0000FFE0-0000-1000-8000-00805F9B34FB', // 蓝牙模块的服务id 写死的  可以通过BLE调试宝看到\n                  characteristicUUID: null, // 特征值id\n                }\n              }\n            }，\n            methods： {\n              // 开锁\n              handleUse() {\n                this.loginState = false\n                uni.openBluetoothAdapter({ // 蓝牙初始化\n                  success: () => {\n                    this.startSearch = true\n                    console.log('蓝牙初始化成功')\n                    uni.showLoading({\n                      title: '正在连接设备',\n                      mask: true\n                    })\n                    this.timeOutObj = setTimeout(_ => { // 30s还没开锁成功就提示失败\n                      if (this.startSearch) {\n                        console.log('设备搜索失败')\n                        this.closeBlue()\n                      }\n                    }, 30000)\n                    uni.startBluetoothDevicesDiscovery({ // 搜寻附近的蓝牙\n                      success: (res) => {\n                        console.log('附近的蓝牙搜索成功', res)\n                        uni.onBluetoothDeviceFound((resBuleList) => { // 监听寻找到新设备的事件\n                          console.log(resBuleList.devices[0].name, this.dataInfo.lyName)\n                          // 蓝牙匹配成功\n                          if (resBuleList.devices[0].name === ('MT' + this.dataInfo.lyName)) {\n                            uni.showLoading({\n                              title: '正在开锁',\n                              mask: true\n                            })\n                            uni.stopBluetoothDevicesDiscovery({  // 当找到匹配的蓝牙后就关掉蓝牙搜寻,因为蓝牙搜寻很耗性能  \n                              success(res) {\n                                console.log('蓝牙搜寻关闭成功')\n                              }  \n                            })\n                            this.blueInfo.deviceID = resBuleList.devices[0].deviceId\n                            console.log('deviceID', this.blueInfo.deviceID)\n                            uni.createBLEConnection({ //连接低功耗蓝牙设备\n                              deviceId: this.blueInfo.deviceID,\n                              success: (resConnect) => {\n                                console.log('低功耗蓝牙连接成功')\n                                uni.getBLEDeviceServices({ // 获取蓝牙设备所有服务  \n                                  deviceId: this.blueInfo.deviceID,\n                                  success: (resDeciceServices) => {\n                                    console.log('蓝牙服务获取成功')\n                                    console.log(resDeciceServices)\n                                    uni.getBLEDeviceCharacteristics({ // 获取蓝牙设备某个服务中所有特征值\n                                      deviceId: this.blueInfo.deviceID,\n                                      serviceId: this.blueInfo.serviceUUID,\n                                      success: (resDeviceCharacteristics) => {\n                                        console.log('特征值获取成功')\n                                        this.blueInfo.characteristicUUID = resDeviceCharacteristics.characteristics[0].uuid\n                                        console.log(this.blueInfo)\n                                        uni.notifyBLECharacteristicValueChange({  // 开启notify功能，订阅特征值\n                                          state: true,\n                                          deviceId: this.blueInfo.deviceID,\n                                          serviceId: this.blueInfo.serviceUUID,\n                                          characteristicId: this.blueInfo.characteristicUUID,\n                                          success: () => {\n                                            console.log('notify监听开启成功')\n                                            uni.onBLECharacteristicValueChange((resValueChange) => { // 监听低功耗蓝牙设备的特征值变化事件\n                                              let bleResData = this.ab2hex(resValueChange.value)\n                                              console.log('监听数据返回', bleResData)\n                                              if (bleResData.substr(2, 2) === '01' && !this.loginState) { // 蓝牙登录应答\n                                                if (bleResData.substr(6, 2) === '01') { // 登陆成功\n                                                  this.loginState = true\n                                                  this.openLock()\n                                                } else if (bleResData.substr(6, 2) === '02') { // 登陆失败\n                                                  uni.closeBLEConnection({\n                                                    deviceId: this.blueInfo.deviceID,\n                                                    success(resCloseBLE) {\n                                                      console.log('低功耗蓝牙设备断开成功', resCloseBLE)\n                                                    }\n                                                  })\n                                                  this.closeBlue()\n                                                }\n                                              } else if (bleResData.substr(2, 2) === '02') { // 开锁应答\n                                                if (bleResData.substr(6, 2) === '01') { // 开锁成功\n                                                  uni.hideLoading()\n                                                  this.startSearch = false\n                                                  this.$toast('开锁成功', true)\n                                                  this.createOrder()\n                                                  uni.closeBLEConnection({\n                                                    deviceId: this.blueInfo.deviceID,\n                                                    success(resCloseBLE) {\n                                                      console.log('低功耗蓝牙设备断开成功', resCloseBLE)\n                                                    }\n                                                  })\n                                                  uni.closeBluetoothAdapter()\n                                                } else if (bleResData.substr(6, 2) === '02') { // 开锁失败\n                                                  uni.closeBLEConnection({\n                                                    deviceId: this.blueInfo.deviceID,\n                                                    success(resCloseBLE) {\n                                                      console.log('低功耗蓝牙设备断开成功', resCloseBLE)\n                                                    }\n                                                  })\n                                                  this.closeBlue()\n                                                }\n                                              }\n                                            })\n                                            \n                                          },\n                                          fail: (err) => {\n                                            console.log('notify监听开启失败', err)\n                                            this.closeBlue()\n                                          }\n                                        })\n                                        // 登陆指令\n                                        this.loginBt()\n                                      }\n                                    })\n                                  },\n                                  fail: (err) => {\n                                    console.log('蓝牙服务获取失败', err)\n                                    // 断开与低功耗蓝牙设备的连接\n                                    uni.closeBLEConnection({\n                                      deviceId: this.blueInfo.deviceID,\n                                      success(resCloseBLE) {\n                                        console.log('低功耗蓝牙设备断开成功', resCloseBLE)\n                                      }\n                                    })\n                                    this.closeBlue()\n                                  }\n                                })\n                              },\n                              fail: (err) => {\n                                console.log('低功耗蓝牙连接失败', err)\n                                this.closeBlue()\n                              }\n                            })\n                          }\n                        })\n                      },\n                      fail: (err) => {\n                        console.log('附近的蓝牙搜索失败', err)\n                        this.closeBlue()\n                      }\n                    })\n                  },\n                  fail: (res) => {\n                    console.log('蓝牙初始化失败')\n                    if (res.errCode == 10001) {  \n                      this.$toast('蓝牙未打开')\n                    } else {\n                      this.$toast(res.errMsg)\n                    } \n                  }\n                })\n                \n              },\n              // 登录指令\n              loginBt() {\n                const buffer = new ArrayBuffer(12)\n                const dataView = new DataView(buffer)\n                dataView.setUint8(0, 0x3A)\n                dataView.setUint8(1, 0x01)\n                dataView.setUint8(2, 0x08)\n                let arr = [0x3A, 0x01, 0x08]\n                // 锁编码转为16进制   字节长度8位 不足8位前面补0\n                let code = Number(this.dataInfo.lockCode).toString(16).padStart(16, 0)\n                // IMEI\n                for(let i = 3; i < 11; i++) {\n                  let imeiByte = code.substr((i - 3) * 2, 2)\n                  dataView.setUint8(i, Number('0x' + imeiByte))\n                  arr.push(Number('0x' + imeiByte))\n                }\n                // 校验和\n                let sum = 0\n                for (let i = 0; i < arr.length; i++) {\n                  sum += arr[i]\n                }\n                sum = sum.toString(16)\n                console.log('校验和', sum)\n                dataView.setUint8(11, Number('0x' + sum.substring(sum.length - 2)))\n                this.writeBTData(buffer)\n              },\n              // 开锁指令\n              openLock() {\n                const buffer = new ArrayBuffer(5)\n                const dataView = new DataView(buffer)\n                dataView.setUint8(0, 0x3A)\n                dataView.setUint8(1, 0x02)\n                dataView.setUint8(2, 0x01)\n                dataView.setUint8(3, Number('0x' + this.dataInfo.passNum))\n                let sum = 0x3A + 0x02 + 0x01 + Number('0x' + this.dataInfo.passNum)\n                sum = sum.toString(16)\n                dataView.setUint8(4, Number('0x' + sum.substring(sum.length - 2)))\n                this.writeBTData(buffer)\n              },\n              // 写入数据\n              writeBTData(buffer) {\n                uni.writeBLECharacteristicValue({\n                  deviceId: this.blueInfo.deviceID,\n                  serviceId: this.blueInfo.serviceUUID,\n                  characteristicId: this.blueInfo.characteristicUUID,\n                  value: buffer,\n                  success: (resWrite) => {\n                    console.log('写入数据成功', resWrite)\n                  },\n                  fail: (err) => {\n                    console.log('写入数据失败', err)\n                    this.closeBlue()\n                  }\n                })\n              },\n              // 关闭蓝牙\n              closeBlue() {\n                uni.hideLoading()\n                // 清除定时器\n                if (this.timeOutObj) {\n                  clearTimeout(this.timeOutObj)\n                }\n                this.$toast('开锁失败，请重试')\n                uni.closeBluetoothAdapter({\n                  success(res) {\n                    console.log('蓝牙关闭成功')\n                  }\n                })\n              },\n              // ArrayBuffer转16进度字符串\n              ab2hex(buffer) {\n                const hexArr = Array.prototype.map.call(\n                  new Uint8Array(buffer),\n                  function (bit) {\n                    return ('00' + bit.toString(16)).slice(-2)\n                  }\n                )\n                return hexArr.join('')\n              },\n            }\n          }\n        <\/script>\n      "})},i=s(23),o=Object(i.a)(t,(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"uniapp蓝牙开锁demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uniapp蓝牙开锁demo"}},[this._v("#")]),this._v(" uniapp蓝牙开锁demo")]),this._v(" "),[n("demo",{attrs:{codeStr:this.str}},[this._v("\n    流程：先发送登录指令，登陆成功后发开锁指令\n    "),n("a",{attrs:{href:"/images/BT.png",target:"_blank"}},[n("img",{attrs:{src:"/images/BT.png"}})])])]],2)}),[],!1,null,null,null);n.default=o.exports}}]);