(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{1008:function(n,e,t){"use strict";t.r(e);var r={data:()=>({link:"",str:"\n        import server from '@/utils/request.js'\n        export function login(param) {\n          return server('login', 'post', param)\n        }\n        import { baseurl }  from './baseData.js'\n        const errormessage={\n          404:'请求出错,接口未找到'\n        }\n        // 文件目录utils下request.js的封装\n        function request(url, methods, type) {\n          return new Promise((resolve, reject) => {\n            uni.request({\n              url: baseurl + url,\n              method: methods,\n              timeout: 10000,\n              data: type,\n              header:{\n                \n              },\n              success(res) {\n                  if(res.statusCode===200){\n                    resolve(res.data)\n                  }else {\n                      uni.showToast({\n                        icon:'none',\n                        title: errormessage[res.statusCode],\n                        duration: 2000\n                      });\n                    reject(res.data)\n                  }\n              },\n              fail(error) {\n                  uni.showToast({\n                  icon:'none',\n                  title: '未知异常，请重试！！！',\n                  duration: 2000\n                });\n                reject(error)\n              }\n            })\n          })\n        }\n        export default request\n      "}),methods:{back(n){this.link=n}}},s=t(23),o=Object(s.a)(r,(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"uni-封装请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uni-封装请求"}},[this._v("#")]),this._v(" uni 封装请求")]),this._v(" "),[e("demo",{attrs:{codeStr:this.str}},[this._v("\n    baseurl是请求接口的接口地址\n  ")])]],2)}),[],!1,null,null,null);e.default=o.exports}}]);