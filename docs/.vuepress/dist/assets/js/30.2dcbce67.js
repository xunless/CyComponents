(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{992:function(e,n,a){"use strict";a.r(n);var t={data:()=>({filename:"new_${file.name}",str:"\n        <script>\n          export default {\n            // 获取到的信息包含大小，类型....\n\n            let filetab = document.getElementById('filedemo')\n            filetab.onchange = function (e) {\n              let file = e.target.files[0] // 获取到的图片信息\n              let file_type = file.type // 图片的类型\n              let file_name = file.name // 图片的名字\n              let file_size = file.size // 图片的大小\n            }\n\n            // 将获取的图片转为 base64，返回一个空或者转换后的 Base64\n\n            /**\n            * @param {file} 需要压缩的图片文件\n            * @return 图片的Base64\n            */\n\n            function ImageToBase64 (file) {\n              return new Promise(resolve => {\n                if (!file) resolve(null) // 没有文件时直接返回\n                let fileReader = new FileReader()\n                fileReader.readAsDataURL(file)\n                fileReader.onload = function (e) {\n                  // e 是 onLoad之后返回的参数信息，其中就有我们需要的Base64的信息\n                  let imgBase64Info = e.target.result\n                  resolve(imgBase64Info) // 返回获取到的Base64信息\n                }\n              })\n            }\n            \n            // 通过拿到的 Base64 的信息，我们通过创建 canvas 画布，进行画图，设置压缩级别后转出为 Base64，之后返回新的 Base64 信息\n\n            /**\n            * @param {base64} 获取BASE64的返回值\n            * @return 新的Base64\n            */\n\n            function comperImage (base64, filetype, quality) {\n              return new Promise(resolve => {\n                if (!base64) resolve() // 没有给信息直接返回\n                let image = new Image()\n                image.src = base64\n                image.onload = function (e) {\n                  let info = e.path[0]\n                  let sacle = info.width / info.height // 获取宽高比例\n                  let canvas = document.createElement('canvas') // 创建画布\n                  let ctx = canvas.getContext('2d')\n                  canvas.width = info.width // 设置画布宽高\n                  canvas.height = info.height\n                  ctx.drawImage(image, 0, 0, canvas.width, canvas.height) // 将图片绘制在画板上\n                  let newBase64 = canvas.toDataURL(filetype, quality) // 将画板内容转为图片并设置压缩比例\n                  resolve(newBase64)\n                }\n              })\n              \n              // 将新的 Base64 转为新的文件并且返回\n\n              /*\n              *  Base64转换为File\n              * @param { string } 文件的url，此处为生成的新的Base64\n              * @param { string } 要生成的文件名字\n              * @return  File\n              */\n              function dataURLtoFile (dataurl, filename) {\n                return new Promise(resolve => {\n                  var arr = dataurl.split(','),\n                    mime = arr[0].match(/:(.*?);/)[1],\n                    bstr = atob(arr[1]),\n                    n = bstr.length,\n                    u8arr = new Uint8Array(n)\n                  while (n--) {\n                    u8arr[n] = bstr.charCodeAt(n)\n                  }\n                  resolve(new File([u8arr], filename, { type: mime }))\n                })\n              }\n\n              // 当做完以上步骤之后，我们就可以拿到新的文件进行后续的操作。 放个案例\n\n              /**\n              *  压缩图片\n              * @param { file } 需要压缩的文件\n              * @return\n              */\n              \n              async function comImg (file, quality, filename = '文件路径') {\n                // 将png格式文件转为JPEG输出，因为Png图片不能用这种方式进行压缩\n                let filetype = file.type === 'image/png' ? 'image/jpeg' : file.type\n                let base64 = await ImageToBase64(file) // 获取需要压缩图片的base64\n                let newBase64 = await comperImage(base64, filetype, quality) // 获取压缩后的base64\n                let newFile = await dataURLtoFile(newBase64, filename) // 生成新文件\n                let resultImg = new Image() // 创建Image标签\n                resultImg.src = URL.createObjectURL(newFile) // 创建img的src\n                document.body.appendChild(resultImg) //添加至页面\n              }\n            }\n          }\n        <\/script>\n      "})},i=a(23),l=Object(i.a)(t,(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"js图片压缩-不可用于-uni-app"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js图片压缩-不可用于-uni-app"}},[this._v("#")]),this._v(" JS图片压缩（不可用于 UNI-APP）")]),this._v(" "),[n("demo",{attrs:{codeStr:this.str}})]],2)}),[],!1,null,null,null);n.default=l.exports}}]);