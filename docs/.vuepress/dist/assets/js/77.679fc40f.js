(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{1027:function(t,n,e){"use strict";e.r(n);var a={data:()=>({str:"\n        <template>\n          <view class=\"container\">\n            <canvas class=\"canvas\" canvas-id=\"TCanvas\" id=\"TCanvas\"></canvas>\n          </view>\n        </template>\n\n        <script>\n          export default {\n            data() {\n              return {\n                ctx: null,\n                temperature: 45\n              };\n            },\n            onLoad() {},\n            onReady() {\n              this.ctx = uni.createCanvasContext('TCanvas')\n              this.initCanvas()\n            },\n            methods: {\n              initCanvas() {\n                let ctx = this.ctx\n                ctx.clearRect(0, 0, 600, 800)\n                ctx.draw()\n                \n                let ctxCenter = {\n                  x: 155, // 圆心x坐标\n                  y: 130, // 圆心y坐标\n                  outsideRadius: 80, // 外半径长度\n                  insideRadius: 75 ,// 内半径长度\n                  dotX: 155, // 小黄点x坐标\n                  dotY: 130, // 小黄点y坐标\n                  dotRadius: 6, // 小黄点半径\n                  shadeRadius: 15, // 小黄点阴影半径\n                }\n                \n                // 外圆弧\n                ctx.beginPath()\n                ctx.arc(ctxCenter.x, ctxCenter.y, ctxCenter.outsideRadius, 0.75 * Math.PI, 2.25 * Math.PI) // 3/4圆\n                ctx.setLineWidth(15) // 设置边框宽度\n                ctx.setStrokeStyle('#b9f5f2')  // 设置边框颜色\n                ctx.stroke() // 画线\n                \n                // 内实心圆\n                ctx.beginPath()\n                ctx.arc(ctxCenter.x, ctxCenter.y, ctxCenter.insideRadius, 0, 2 * Math.PI)\n                ctx.setFillStyle('#ffffff') // 填充颜色\n                ctx.fill() // 填充\n                \n                // 根据温度计算小黄点的位置\n                let angle = (this.temperature + 10) / 109 * 270 + 45\n                ctxCenter.dotX = ctxCenter.x - Math.sin(angle*Math.PI/180) * (ctxCenter.outsideRadius + ctxCenter.dotRadius)\n                ctxCenter.dotY = ctxCenter.y + Math.cos(angle*Math.PI/180) * (ctxCenter.outsideRadius + ctxCenter.dotRadius)\n                \n                // 小黄点\n                ctx.beginPath()\n                ctx.arc(ctxCenter.dotX, ctxCenter.dotY, 6, 0, 2 * Math.PI)\n                ctx.setFillStyle('#ffbb05') // 填充颜色\n                ctx.fill() // 填充\n                \n                // 小黄点阴影\n                ctx.beginPath()\n                ctx.arc(ctxCenter.dotX, ctxCenter.dotY, 15, 0, 2 * Math.PI)\n                ctx.setFillStyle('rgba(255,187,5,0.1)') // 填充颜色\n                ctx.fill() // 填充\n                \n                let sideStartLength = ctxCenter.outsideRadius + 15  // 斜边长\n                let sideEndLength = ctxCenter.outsideRadius + 25  // 斜边长\n                \n                // 刻度线\n                for (let i = 0; i < 61; i++) {\n                  let nowAngle = 45 + 4.5 * i\n                  let lineColor\n                  if (nowAngle < angle) {\n                    lineColor = '#bdd585'\n                  } else {\n                    lineColor = '#b1e6c5'\n                  }\n                  ctx.beginPath()\n                  ctx.setLineWidth(1)\n                  ctx.moveTo(ctxCenter.x - Math.sin(nowAngle*Math.PI/180) * sideStartLength, ctxCenter.y + Math.cos(nowAngle*Math.PI/180) * sideStartLength) // 开始坐标\n                  ctx.lineTo(ctxCenter.x - Math.sin(nowAngle*Math.PI/180) * (sideEndLength + (i % 10 === 0?3:0)), ctxCenter.y + Math.cos(nowAngle*Math.PI/180) * (sideEndLength + (i % 10 === 0?3:0))) // 结束坐标\n                  ctx.setStrokeStyle(lineColor)\n                  ctx.stroke()\n                }\n                \n                // 左右文字\n                ctx.setTextAlign('center')\n                ctx.setFontSize(16)\n                ctx.setFillStyle('#ffffff')\n                ctx.fillText('-10℃', ctxCenter.x - Math.sin(45*Math.PI/180) * (sideEndLength + 45), ctxCenter.y + Math.cos(45*Math.PI/180) * (sideEndLength + 20))\n                ctx.fillText('99℃', ctxCenter.x + Math.sin(45*Math.PI/180) * (sideEndLength + 40), ctxCenter.y + Math.cos(45*Math.PI/180) * (sideEndLength + 20))\n                \n                // 中间温度文字\n                ctx.setFontSize(28)\n                ctx.setFillStyle('#333333')\n                ctx.fillText(this.temperature + '℃', ctxCenter.x, ctxCenter.y - 10)\n                ctx.setFontSize(20)\n                ctx.setFillStyle('#a1a1a1')\n                ctx.fillText('当前温度', ctxCenter.x, ctxCenter.y + 30)\n                \n                // 地温\n                ctx.setFontSize(22)\n                ctx.setFillStyle('#ffffff')\n                ctx.fillText('地温20℃', ctxCenter.x, ctxCenter.y + ctxCenter.outsideRadius + 35)\n                \n                ctx.draw()\n              }\n            }\n          }\n        <\/script>\n\n        <style lang=\"scss\" scoped>\n        .container {\n          width: 100vw;\n          background-color: #0cc3ba;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          .canvas {\n            width: 600rpx;\n            height: 800rpx;\n            margin-top: 100rpx;\n          }\n        }\n        </style>\n\n      "})},c=e(23),s=Object(c.a)(a,(function(){var t=this.$createElement,n=this._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"uniapp-使用canvas绘制简单图表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uniapp-使用canvas绘制简单图表"}},[this._v("#")]),this._v(" uniapp 使用canvas绘制简单图表")]),this._v(" "),[n("demo",{attrs:{codeStr:this.str}},[n("a",{attrs:{href:"/images/canvasDrawChart.png"}},[n("img",{attrs:{src:"/images/canvasDrawChart.png"}})])])]],2)}),[],!1,null,null,null);n.default=s.exports}}]);